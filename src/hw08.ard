\import Bool \using (< \as <')
\import Empty
\import List
\import Utils
\import hw02 (||)
\import hw07 (cons/=nil, head, tail)
\import lect02 (-)
\import lect08 (Functor, Maybe, Nat-ind, id)

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type0) -> A -> A => id' \level 1 _ {\Pi (A : \Type0) -> A -> A} (id' {\Pi (A : \Type) -> A -> A} id)
\func idTest2 : \Type0 -> \Type0 => id' \level 1 _ {\Type0 -> \Type0} Maybe
\func idTest3 : \Type (\suc \lp) => id' \level (\suc (\suc \lp)) _ {\Type (\suc \lp)} Functor
\func idTest4 : \Type (\suc \lp) => id' \level (\suc (\suc \lp)) _ {\Type (\suc \lp)} (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Type} -> (A -> B) -> Maybe A -> Maybe B) : \Type0 => id' (\level 1 _) {\Type0} (Functor Maybe f)

-- 2. Определите div через Nat-ind.


\func n<sucn {n : Nat} : T (n <' suc n) \elim n
  | 0 => tt
  | suc n =>  n<sucn

\func sucRight {n k : Nat} (p : T (n <' k)) : T (n <' suc k) \elim n, k
  | 0, k => tt
  | suc n, 0 => T-absurd p
  | suc n, suc k => sucRight p

\func n-suc<n {n k : Nat} (p : n <' k = false) : T (n - k <' suc n) \elim n, k
  | 0, _ => tt
  | suc n, 0 => n<sucn
  | suc n, suc k => sucRight (n-suc<n p)

\func div (n k : Nat) : Nat => Nat-ind (\lam _ => Nat) (t k) n \where
  \func t (k : Nat) (n : Nat) (p : \Pi (n' : Nat) -> T (n' <' n) -> Nat) : Nat \elim k, n
    | 0, _ => 0
    | _, 0 => 0
    | suc k, suc n => \case (n <' k) \as a, idp : (n <' k) = a \with {
      | true, _ => 0
      | false, r => suc (p (n - k) (n-suc<n r))
    }

-- 3. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условияЖ
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

-- 4. Докажите корректности сортировки вставками.


\class TotalPoset (E : \Type)
  | \infix 4 <= : E -> E -> \Type
  | <=-reflexive (x : E) : x <= x
  | <=-transitive (x y z : E) : x <= y -> y <= z -> x <= z
  | <=-antisymmetric (x y : E) : x <= y -> y <= x -> x = y
  | totality (x y : E) : Either (x <= y) (y <= x)

\data IsSorted {A : TotalPoset} (x : List A) \elim x
  | nil => empty-list
  | cons x nil => one-element
  | cons x (cons y l) => consS (x <= y) (IsSorted (cons y l))

\func isSortedTail {A : TotalPoset} {x : A} {xs : List A} (p : IsSorted (cons x xs)) : IsSorted xs \elim xs
  | nil => empty-list
  | cons xx xxs => \case p \with {
    | consS _ q => q
  }

\data IsPermutation {A : \Type} (x y : List A) \elim x, y
  | nil, nil => nil-nil
  | cons x (cons x' xs), cons y yx => swap-x (IsPermutation (cons x' (cons x xs)) (cons y yx))
  | cons x xs, cons y ys => consP (x = y) (IsPermutation xs ys)
  | x, y => trans (z : List A) (IsPermutation x z) (IsPermutation z y)

\func eqListsPerm {A : \Type} {x y : List A} (p : x = y) : IsPermutation x y \elim x, y
  | nil, nil => nil-nil
  | cons x xs, nil => absurd (cons/=nil x xs p)
  | nil, cons x xs => absurd (cons/=nil x xs (sym p))
  | cons x xs, cons y ys => consP (pmap (head x) p) (eqListsPerm (pmap tail p))




\func sortProof {A : TotalPoset} (list : List A) : IsSorted (sort list) \elim list
  | nil => empty-list
  | cons x xs => insertSortProof x (sort xs) (sortProof xs)

\func insertSortProof {A : TotalPoset} (e : A) (xs : List A) (p : IsSorted xs)
  : IsSorted (sort.insert xs e) \elim xs
  | nil => one-element
  | cons x1 xs1 => \case (totality x1 e) \as t \return
                    IsSorted (\case t \with {
                      | inr _ => cons e (cons x1 xs1)
                      | inl _ => cons x1 (sort.insert xs1 e)}) \with {
    | inl x1<=e => foo x1<=e p
    | inr e<=x1 => consS e<=x1 p
  } \where {

  \func foo {A : TotalPoset} {x y : A} {ys : List A} (y<=x : y <= x) (q : IsSorted (cons y ys)) :
    (IsSorted (cons y (sort.insert ys x))) \elim ys
    | nil => consS y<=x (one-element)
    | cons y2 ys2 => \case (totality y2 x) \as t \return
                      IsSorted (cons y (\case t \with {
                        | inr _ => cons x (cons y2 ys2)
                        | inl _ => cons y2 (sort.insert ys2 x)})) \with {
      | inl y2<=x => \case q \with {consS y<=y2 s => consS y<=y2 (foo y2<=x s)}
      | inr x<=y2 => consS y<=x (consS x<=y2 (isSortedTail q))
    }
}




\func permProof {A : TotalPoset} (list : List A) : IsPermutation list (sort list) \elim list
  | nil => nil-nil
  | cons x xs => trans (cons x (sort xs)) (consP idp (permProof xs)) (insertPermProof x (sort xs))

\func insertPermProof {A : TotalPoset} (x : A) (xs : List A)
  : IsPermutation (cons x xs) (sort.insert xs x) \elim xs
  | nil => consP idp nil-nil
  | cons xx xxs => \case totality xx x \as t \return
                    IsPermutation (cons x (cons xx xxs)) (\case t \with {
                      | inr _ => cons x (cons xx xxs)
                      | inl _ => cons xx (sort.insert xxs x)
                    }) \with {
    | inl xx<=x => swap-x (consP idp (insertPermProof x xxs))
    | inr x<=xx => eqListsPerm idp
  }




\func sort {A : TotalPoset} (list : List A) : List A \elim list
  | nil => nil
  | cons x xs => insert (sort xs) x \where
  \func insert {A : TotalPoset} (list : List A) (c : A) : List A \elim list
    | nil => cons c nil
    | cons x xs =>  \case (totality x c) \with {
      | inl x<=c => cons x (insert xs c)
      | inr c<=x => cons c (cons x xs)
    }

