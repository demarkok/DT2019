\import Empty
\import lect04

\data Bool | true | false

\func if {A : \Type} (x : Bool) (t e : A) : A \elim x
  | true => t
  | false => e

\data T (b : Bool) \with
  | true => tt

-- T false is empty
\func T-absurd {A : \Type} (t : T false) : A

\func T-true {b : Bool} (p : b = true) : T b \elim b
  | true => tt
  | false => absurd (true/=false (sym p))

\func \infix 4 < (x y : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc x, suc y => x < y


\func \infixr 3 && (x y : Bool) : Bool \elim x
  | true => y
  | false => false
{- Haskell:
   (&&) :: Bool -> Bool -> Bool
   True && y = y
   True && _ = False
-}

\func not (b : Bool) : Bool
  | true => false
  | false => true