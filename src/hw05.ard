\import Utils
\import hw04 (pmap2)
\import lect05
\open Nat

-- 1. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func *-comm (n m : Nat) : n * m = m * n
  | 0, 0 => idp
  | suc n, 0 => *-comm n 0
  | 0, suc m => *-comm 0 m
  | suc n, suc m => pmap suc (
    suc n * m + n    ==< pmap (\lam x => x + n) (*-comm (suc n) m)  >==
    (m * n + m) + n  ==< pmap (\lam x => (x + m) + n) (sym (*-comm n m)) >==
    (n * m + m) + n  ==< +-assoc (n * m) m n >==
    n * m + (m + n)  ==< pmap (\lam x => n * m + x) (+-comm m n) >==
    n * m + (n + m)  ==< sym ((+-assoc) (n * m) n m) >==
    (n * m + n) + m  ==< sym (pmap (\lam x => x + m) (sym (*-comm n (suc m)))) >== -- sym (pmap (\lam x => x + m) *-comm (suc m) n)
    suc m * n + m    `qed)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k => {?}

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n => {?}

-- 2. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs => {?}

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs => {?}

-- 3. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs => v++-assoc.transport-vcons-comm (+-comm 0 n) x (xs v++ vnil) *> pmap (vcons x) (vnil-rightId xs)

-- 4. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
    (b : \Pi (a : A) -> B a a idp)
    {a a' : A} (p : a = a') : B a a' p => J {A} {a} (B a) (b a) {a'} p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- 1. Выразите transport через Jalt.
-- 2. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- 3. Используя эти две конструкции, легко определить J.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  (Jalt {A} (\lam a a' _ => B a -> B a') (\lam b x => x) {a} {a'} p) b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt (\lam a a' e => (a, idp) = {\Sigma (x : A) (a = x)} (a', e)) (\lam a => idp) p.2
-- А получится ли это доказать с помощью pmap2?

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a') : B a' p => transport' {\Sigma (x : A) (a = x)} (\lam pair => B pair.1 pair.2)
                                                 (sigma-contr (a', p)) b

-- 5. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A)

-- 6. Докажите эквивалентность пяти различных определений LessOrEq: lessOrEq, LessOrEq, LessOrEq', LessOrEq'' и LessOrEq'''.

-- 7. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | x<=>x (x = y)
  | x<Z>y (z : A) (R x z) (ReflTransClosure R z y)

-- 8. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func \infix 4 <-> {A : \Type} (P Q : A -> A -> \Type) => \Pi (x y : A) -> \Sigma (P x y -> Q x y) (Q x y -> P x y)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type)
                                       (refl : \Pi (x : A) -> R x x)
                                       (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
                                       : R <-> ReflTransClosure R =>
  \lam x y => (\lam xRy => (x<Z>y y xRy (x<=>x idp)), RTCtoR R refl trans x y) \where

  \func RTCtoR {A : \Type} (R : A -> A -> \Type)
               (refl : \Pi (x : A) -> R x x)
               (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
               (x y : A)
               (xRTCy : ReflTransClosure R x y) : R x y \elim xRTCy
    | x<=>x x=y => transport (R x) x=y (refl x)
    | x<Z>y z xRz zRTCy => trans x z y xRz (RTCtoR R refl trans z y zRTCy)


-- 9. Определите предикат xs <= ys на списках, означающий "список xs является подсписком ys".

-- 10. Докажите, что filter xs <= xs для любого списка xs.
