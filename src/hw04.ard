\import Bool
\import Empty
\import lect04

-- 1. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f a' x) q (pmap (\lam g => g b) (pmap f p))

-- 2. Докажите, что transport выражается через pmap и repl и наоборот.

-- Определение pmap через transport было дано на лекции.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B =>
  transport (\lam X => X) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b

-- В заданиях 3-6 нельзя использовать не только coe, но и все функции, определенные через него, в частнсоти transport.

-- 3. Мы доказали, что left = right через coe. Докажите это, не используя эту функцию.

\func left=right : left = right =>
  path (\lam x => x)

-- 4. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя coe.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') =>
  path (\lam x => (p @ x, q @ x))

-- 5. Докажите, что если p = p', то p.1 = p'.1, не используя coe.

\func projEq {A : \Type} {B : A -> \Type} {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  path (\lam x => (t @ x).1)

-- 6. Докажите pmap2, не используя coe.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam x => f (p @ x) (q @ x))

-- 7. Мы видели как определить transport через coe. Определите частный случай coe через transport.
--    Можно ли определить transport через coe0?
--    Верно ли, что эти конструкции взаимообратны в том смысле что, если мы построим transport по coe, а потом coe0 по transport, то получим исходный (частный случай) coe? Верно ли, что они взаимообратны в обратную сторону?

\func coe0 (A : I -> \Type) (a : A left) : A right =>
  transport A (path (\lam x => x)) a

-- 8. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left =>
  transport B (sym left=right) b

-- 9. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func not (b : Bool) : Bool
  | true => false
  | false => true

\func notNotId : (\lam x => not (not x)) = (\lam x => x) =>
  funExt (\lam _ => Bool) notnotb=b \where
    \func notnotb=b (b : Bool) : (not (not b) = b) \elim b
      | true => idp
      | false => idp

-- 10. Определите факториал через Nat-rec.

\func fact : Nat -> Nat => Nat-rec Nat 1 (*)

-- 11. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\open Nat(+)

\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) =>
  Nat-elim (\lam z => (x + y) + z = x + (y + z))
           idp
           (\lam z p => pmap suc p)
           z

-- 12. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

-- 13. Определите рекурсор и элиминатор для List.

\func D-elim (P : D -> \Type)
             (z : \Pi (n : Nat) -> P (con1 n))
             (s2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
             (s3 : \Pi (f : Nat -> D) -> (\Pi (x : Nat) -> P (f x)) -> P (con3 f))
             (d : D) : P d \elim d
  | con1 x => z x
  | con2 d1 d2 => s2 d1 d2 (D-elim P z s2 s3 d1) (D-elim P z s2 s3 d2)
  | con3 f => s3 f (\lam x => D-elim P z s2 s3 (f x))

-- 14. Докажите, что 0 не равно suc x.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => T-absurd (transport T (sym p) ss) \where
  \data T (x : Nat) \elim x
    | suc _ => ss
  \func T-absurd {A : \Type} (p : zero/=suc.T 0) : A

-- 15. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => zero/=suc 0 (pmap (\lam f => pred (f 1)) p) \where
  \func pred (x : Nat) : Nat \elim x
    | suc x => x
    | zero => zero
