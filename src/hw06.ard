\import Utils (sym)
\import hw02
\import lect05
\import lect06

-- 1. Определите функцию swap при помощи \cowith, swap' при помощи паттерн матчинг и swap'' при помощи \new.

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

\func swap' (p : Pair) : Pair p.B p.A
  | (A, B, a, b) => \new Pair B A b a

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair B A p.snd_ p.fst_

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\data Empty

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p \with {}

\func one-isPos : PosNat 1 => \new PosNat 1 tt

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Coprime
  | a : Nat
  | b : Nat
  | gcdab=1 : gcd a b = 1



\func Prime-60 => Coprime { | b => 60 }


-- 5. Определите класс монад, который наследует класс функторов. Определите \instance этого класса для Maybe.

\class Monad \extends Functor
  | \infixl 3 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | return {A : \Type} (a : A) : F A
  | left-id {A B : \Type} (a : A) (f : A -> F B) : (return a) >>= f = f a
  | right-id {A : \Type} (m : F A) : m >>= return = m
  | assoc {A B C : \Type} (m : F A) (f : A -> F B) (g : B -> F C) : m >>= (\lam x => f x >>= g) = m >>= f >>= g
  | fmap f ma => ma >>= (\lam x => return (f x))
  | fmap-id {A : \Type} (y : F A) => right-id y

  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A) =>
    y >>= (\lam x => return (g (f x)))
      ==< sym (path (\lam i => y >>= (\lam x => ((left-id (f x) (\lam x => return (g x))) @ i)))) >==
    y >>= (\lam x => return (f x) >>= (\lam x => return (g x)))
      ==< assoc y (\lam x => return (f x)) (\lam x => return (g x)) >==
    y >>= (\lam x => return (f x)) >>= (\lam x => return (g x)) `qed


\data Maybe (A : \Type) | nothing | just A

-- 6. Определите инстансы монады для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type) : Monad (\lam A => State S A)
  | >>= {A} {B} (m : State S A) (k : A -> State S B) => \new State S B (\lam s => (state {k (m.state s).2}) (m.state s).1)
  | return {A} a => \new State S A (\lam s => (s, a))
  | left-id a f => idp
  | right-id m => idp
  | assoc m f g => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)
