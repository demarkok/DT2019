-- Рефлексивность: a = a.
\func idp {A : \Type} {a : A} : a = a => path (\lam _ => a)

-- Конгруэнтность: если a = a', то f a = f a'.
\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' => path (\lam i => f (p @ i))

\data Either (A B : \Type)
  | inl A
  | inr B

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a)
  => coe (\lam i => B (p @ i)) b right

-- Транзитивность в инфиксной форме.
\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

-- Симметричность равенства.
\func sym {A : \Type} {a a' : A} (p : a = a') => transport (\lam x => x = a) p idp