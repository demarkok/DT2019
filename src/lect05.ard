\open Nat
\import Utils

-- 1. Коммутативность сложения.

-- transport обладает следующим свойством:
-- transport B idp b => b
-- \func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a)
--   => coe (\lam i => B (p @ i)) b right

-- Транзитивность в инфиксной форме.
-- \func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
--   => transport (\lam x => a = x) q p

-- Функция *> обладает следующим свойством:
-- p *> idp => p
-- Можно определить транзитивность <*, которая будем обладать свойством idp <* p => p, но пока она нам не понадобится.

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | suc n, 0 => pmap suc (+-comm n 0)
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

-- 2. Equational reasoning, коммутивность сложения через него.

\func \infix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

-- Используя equational reasoning, можно то же самое доказательство записать в более читаемой форме.
\func +-comm' (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | suc n, 0 => pmap suc (+-comm' n 0)
  | 0, suc m => pmap suc (+-comm' 0 m)
  | suc n, suc m => pmap suc (
    suc n + m   ==< +-comm' (suc n) m >==
    suc (m + n) ==< pmap suc (sym (+-comm' n m)) >==
    suc (n + m) ==< +-comm' n (suc m) >==
    suc m + n   `qed
  )

-- x `f == f x -- постфиксная нотация
-- x `f` y == f x y -- инфиксная нотация

-- 3. Оператор J.

-- Оператор J является обобщением transport.
-- Если transport -- это независимый элиминатор, то J -- его зависимая версия.

-- Можно сравнить с элиминаторами для Nat.
-- Независимая версия:
\func Nat-rec (B : \Type)
    (z : B)
    (s : Nat -> B -> B)
    (n : Nat)
    : B \elim n
    | 0 => z
    | suc n => s n (Nat-rec B z s n)

-- Зависимая версия:
\func Nat-elim (B : Nat -> \Type)
    (z : B 0)
    (s : \Pi (k : Nat) -> B k -> B (suc k))
    (n : Nat)
    : B n \elim n
    | 0 => z
    | suc n => s n (Nat-elim B z s n)

-- Независимая версия:
\func transport'
    {A : \Type}
    (B : A -> \Type)
    {a a' : A} (p : a = a')
    (b : B a)
    : B a'
  => coe (\lam i => B (p @ i)) b right

-- Зависимая версия:
\func J
    {A : \Type} {a : A}
    (B : \Pi (a' : A) -> a = a' -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a')
    : B a' p
  -- Его определение пока не важно.
  => coe (\lam i => B (p @ i) (psqueeze p i)) b right
  \where {
    \func squeeze (i j : I) => coe (\lam i => Path (\lam j => left = squeeze1 i j) (path (\lam _ => left)) (path (\lam j => squeeze1 i j))) (path (\lam _ => path (\lam _ => left))) right @ i @ j
    \func squeeze1 (i j : I) => coe (\lam x => left = x) (path (\lam _ => left)) j @ i
    \func psqueeze  {A : \Type} {a a' : A} (p : a = a') (i : I) : a = p @ i => path (\lam j => p @ squeeze i j)
  }

-- J говорит, что для определения функции над a = a' достаточно определить ее для idp.
-- При этом a' должен варьироваться вместе с a'.
-- Если мы определим версию J, в которой a' всегда равно a, то мы получим оператор K:
{-
\func K {A : \Type} {a : A} (B : a = a -> \Type)
    (b : B idp)
    (p : a = a) : B p => {?}
-}
-- Этот оператор эквивалентен утверждению, что любой элемент a = a равен idp.
-- Его невозможно доказать.
-- Его можно добавить как аксиому, но мы не будем этого делать.
-- Мы будем обсуждать его подробнее позже.

-- 4. Ассоциативность ++ для векторов.

\data Vec (A : \Type) (n : Nat) \elim n
  | zero => vnil
  | suc n => vcons A (Vec A n)

\func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m + n) \elim n, xs
  | 0, vnil => ys
  | suc n, vcons x xs => vcons x (xs v++ ys)

-- Ассоциативность для v++ даже сформулировать сложно, так как у (xs v++ ys) v++ zs и xs v++ (ys v++ zs) разные типы: Vec A (k + (m + n)) и Vec A ((k + m) + n).
-- Это можно поправить при помощи transport, так как он позволяет любой элемент Vec A x превратить в элемент Vec A y, если x и y равны.
\func v++-assoc {A : \Type} {n m k : Nat} (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : (xs v++ ys) v++ zs = transport (Vec A) (+-assoc k m n) (xs v++ (ys v++ zs)) \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs =>
    pmap (vcons x) (v++-assoc xs ys zs) *>
    sym (transport-vcons-comm (+-assoc k m n) x (xs v++ (ys v++ zs)))
  \where
    -- transport коммутирует со всеми конструкторами.
    -- Ниже приведено доказательство для vcons.
    \func transport-vcons-comm {A : \Type} {n m : Nat} (p : n = m) (x : A) (xs : Vec A n)
      : transport (Vec A) (pmap suc p) (vcons x xs) = vcons x (transport (Vec A) p xs)
      => J (\lam m' p' => transport (Vec A) (pmap suc p') (vcons x xs) = vcons x (transport (Vec A) p' xs))
           idp
           p

{-
  | 0, vnil => idp
  | suc n, vcons x xs =>
        pmap (vcons x) (v++-assoc xs ys zs) *> -- Чтобы доказать это утверждение, мы сначала используем индукционную гипотезу.
                                               -- После этого нам нужно доказать, что
                                               -- vcons x (transport (Vec A) (+-assoc k m n) (xs v++ (ys v++ zs))) =
                                               -- transport (Vec A) (pmap suc (+-assoc k m n)) (vcons x (xs v++ (ys v++ zs))
                                               -- Мы обобщаем это утверждение и доказываем его не только для +-assoc k m n, а для любых e : Nat и p : k + m + n = e.
                                               -- Первым аргументом J передается это обобщенное утверждение.
                                               -- После этого остается только доказать его для случае p == idp.
                                               -- А в этом случае это верно по рефлексивности (это второй аргумент J).
        J (\lam e (p : k + m + n = e) =>
                    vcons x (transport (Vec A) p (xs v++ (ys v++ zs))) =
                    transport (Vec A) (pmap suc p) (vcons x (xs v++ (ys v++ zs))))
          idp
          (+-assoc k m n)
-}

-- 5. Предикаты.

-- Есть несколько способов определять предикаты над некоторым типом A:
-- * Выразить из через уже существующие (например равенство) и различные логические связки. Например, предикат isEven можно выразить как \lam n => \Sigma (k : Nat) (n = 2 * k).
-- * Рекурсивно. Этот способ работает только если A -- тип данных.
-- * Индуктивно.

\data Unit | unit

\data Empty

-- Определение <= через равенство.
\func LessOrEq''' (n m : Nat) => \Sigma (k : Nat) (k + n = m)

-- Рекурсивное определение предиката <=
\func lessOrEq (n m : Nat) : \Type
  | 0, _ => Unit
  | suc _, 0 => Empty
  | suc n, suc m => lessOrEq n m

-- Первое индуктивное определение <=
\data LessOrEq (n m : Nat) \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func test11 : LessOrEq 0 100 => z<=n
\func test12 : LessOrEq 3 67 => s<=s (s<=s (s<=s z<=n))
-- \func test10 : LessOrEq 1 0 => ....

-- Второе индуктивное определение -- это модификация первого, где вместо паттерн матчинга в \data мы используем равенство.
\data LessOrEq' (n m : Nat)
  | z<=n' (n = 0)
  | s<=s' {n' m' : Nat} (n = suc n') (m = suc m') (LessOrEq' n' m')

-- Один и тот же предикат можно определить индуктивно различными способами.
-- Когда мы хотим задать предикат индуктивно, нам нужно просто написать набор правил, которые верны для данного предиката и при этом пораждают его.
-- Например, в LessOrEq у нас два правила: 0 <= m для любого m и, если n <= m, то suc n <= suc m. Любое неравенство можно получить из этих двух правил.

-- Но это не единственный набор правил, который пораждает <=.
-- Например, мы можем взять следующий набор: n <= n для всех n и, если n <= m, то n <= suc m.
-- Этот набор реализован в LessOrEq''.

-- Третье индуктивное определение <=
\data LessOrEq'' (n m : Nat) \elim m
  | suc m => <=-step (LessOrEq'' n m)
  | m => <=-refl (n = m)
