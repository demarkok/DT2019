\import Bool
\import Empty
\open Nat

-- 1. Симметричность, транзитивность, принцип Лейбница, pmap через него.

-- Принцип Лейбница говорит, что если a и a' обладают одними и теми же свойствами, то они равны.
-- Его легко доказать.
\func Leibniz {A : \Type} {a a' : A}
  (f : \Pi (P : A -> \Type) -> \Sigma (P a -> P a') (P a' -> P a)) : a = a'
  => (f (\lam x => a = x)).1 idp

-- Обратный принцип Лейбница (который мы тоже будем называть принципом Лейбница) говорит, что если a = a', то они обладают одними и теми же свойствами, т.е. если верно B a, то верно B a'.
\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
    => coe (\lam i => B (p @ i)) b right

-- Используя принцип Лейбница, легко доказать (почти) все свойства равенства.
-- Симметричность
\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a
    => transport (\lam x => x = a) p idp

-- Транзитивность
\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
    => transport (\lam x => a = x) q p

-- Конгруэнтность
\func pmap' {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a'
    => transport (\lam x => f a = f x) p idp

-- 5. Определение =.

-- В прелюдии определен тип I с двумя конструкторами left и right, но в отличии от обычных \data эти два конструктора равны.
-- Это означает, что для I нельзя использовать паттерн матчинг, так как иначе было бы легко вывести противоречие.
-- Так как left и right равны, то некоторые a : A и a' : A равны тогда и только тогда, когда существует функция f : I -> A, такая что f left == a и f right == a', где == -- это вычислительное равенство.
-- Тип a = {A} a' определен как тип функций I -> A, удовлетворяющих этому свойству.

-- Чтобы доказать, что a = a, можно взять константную функцию \lam _ => a : I -> A.
\func idp {A : \Type} {a : A} : a = a => path (\lam _ => a)

-- Если f : A -> B и g : I -> A, то их композиция дает нам pmap.
-- Действительно g доказывает, что g left = g right, а композиция f и g доказывает, что f (g left) = f (g right).
\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a'
    => path (\lam i => f (p @ i))

-- Функция @, определенная в прелюдии, -- это просто обратная функция к конструктору path.
-- path (f : I -> A) : f left = f right
-- @ (p : a = a') (i : I) : A
-- path f @ i == f i -- бета-эквивалентность
-- path (\lam i => p @ i) == p -- эта-эквивалентность.

-- pmap можно определять по разному, но если использовать определение, данное выше, то он будет обладать хорошими вычислительными свойствами.
-- Например, pmap id = id и pmap (f . g) = pmap f . pmap g, где (.) -- это композиция.
-- Если определить pmap по другому, то эти равенства тоже будут верны, но не вычислительно, то есть их нельзя будет доказать просто по рефлексивности.
\func pmap-idp {A : \Type} {a a' : A} (p : a = a') : pmap {A} (\lam x => x) p = p
    => idp

-- 2. Функциональная экстенсиональность.

-- Функциональная экстенсиональность говорит, что если две функции f и g равны на всех аргументах, то они равны.
-- Ее легко доказать, используя наше определение равенства.
\func funExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
    (p : \Pi (a : A) -> f a = g a) : f = g
    => path (\lam i => \lam a => p a @ i)

-- В большинстве других языков с зависимыми типами ее доказать нельзя.
-- Ее можно добавить просто как аксиому, то есть функцию без реализации, но аксиомы обычно не любят добавлять, так как это портит вычислительные свойства языка.

-- Например, если мы добавим аксиому исключенного третьего lem, то легко написать константу foo : Nat, которая не будет вычисляться ни в какое конкретное число.
-- \func lem : \Pi (X : \Type) -> Either X (X -> Empty)
-- \func foo : Nat => \case lem Nat \with { | Left => 0 | Right => 1 }

-- 3. Элиминаторы.

-- Элиминатор для Nat
\func Nat-elim (P : Nat -> \Type)
               (z : P zero)
               (s : \Pi (n : Nat) -> P n -> P (suc n))
               (x : Nat) : P x \elim x
  | zero => z
  | suc n => s n (Nat-elim P z s n)

-- Рекурсор для Nat
\func Nat-rec (P : \Type)
              (z : P)
              (s : Nat -> P -> P)
              (x : Nat) : P \elim x
  | zero => z
  | suc n => s n (Nat-rec P z s n)

-- Элиминатор для Bool (рекурсор для Bool -- это просто if).
\func Bool-elim (P : Bool -> \Type)
                (t : P true)
                (f : P false)
                (x : Bool) : P x \elim x
  | true => t
  | false => f

{-
\func coe (P : I -> \Type)
          (a : P left)
          (i : I) : P i \elim i
  | left => a
-}

-- 4. left = right

-- Чтобы доказать, что в I действительно только один элемент, нам нужно использовать функцию coe, определенную в прелюдии.
-- О ней можно думать как об элиминаторе для I.
-- Она говорит, что для определения функции над I достаточно определить ее для left.
-- Для сравнения элиминатор для Bool говорит, что для определения функции над Bool достаточно определить ее для true и false.

-- Используя coe, легко доказать, что любой i : I равен left.
\func left=i (i : I) : left = i
  -- | left => idp
  => coe (\lam i => left = i) idp i

-- В частности left = right.
\func left=right : left = right => left=i right

-- 5. coe и transport.

-- Функция coe тесно связана с transport.
-- Мы определили transport через coe.

-- \func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
--     => coe (\lam i => B (p @ i)) b right
-- Пусть B' == \lam i => B (p @ i).
-- Тогда
-- B' : I -> \Type
-- B' left == B a
-- B' right == B a'
--
-- \lam x => coe B' x right : B' left -> B' right

-- В ДЗ нужно будет показать, что через transport определеяется частный случай coe.

-- 5. Доказательства неравенств.

-- Чтобы доказать, что true не равно false, достаточно определить функцию T : Bool -> \Type, которая на true равна населенному типу, а на false пустому.
-- Тогда из true = false легко вывести противоречие, используя transport.
\func true/=false (p : true = false) : Empty => T-absurd (transport T p tt)

-- Мы не можем доказать, что left не равно right, так как мы не можем определить такую функцию для I ни рекурсивно, ни через \data.
{-
\func TI (b : I)
  | left => \Sigma
  | right => Empty

\data TI' (b : I) \with
  | left => ti
-}
