\import lect02 \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => {?}

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) => {?}

\func fac (x : Nat) => {?}

-- 4. Определите mod и gcd.

\func mod (x y : Nat) => {?}

\func gcd (x y : Nat) => {?}

-- 5. Определите (полиморфный) reverse для списков.

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) => {?}

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) => {?}

-- 8. Докажите, что fac 3 равно 6.

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => {?}

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R => {?}

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => {?}

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => {?}

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => {?}

-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.
