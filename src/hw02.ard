\import lect02 \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}
\func if {A : \Type} (condition : Bool) (then else : A) : A \elim condition
  | true => then
  | false => else

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y' => x * (x ^ y')

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x' => (suc x') * fac x'

-- 4. Определите mod и gcd.

\func mod (x y : Nat) => x - y * (div x y)

\func gcd (x y : Nat) : Nat => gcd' (x + y) x y \where
  \func gcd' (cnt x y : Nat) : Nat \elim cnt, y
    | 0, _ => 0
    | _, 0 => x
    | (suc cnt), y => gcd' cnt y (div x y)

-- 5. Определите (полиморфный) reverse для списков.


\data List (A : \Type) | nil | cons A (List A)
{- Haskell:
   data List a = Nil | Cons a (List a)
-}

\func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)
{- Haskell:
   (++) :: List a -> List A -> List a
   Nil ++ ys = ys
   cons x xs ++ ys = cons x (xs ++ ys)
-}

\func reverse {A : \Type} (list : List A) : List A => rev nil list
  \where
      \func rev {A : \Type} (acc xs : List A) : List A \elim xs
        | nil => acc
        | cons x xs => rev (cons x acc) xs

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (comparator : A -> A -> Bool) (list : List A) : List A \elim list
  | nil => nil
  | cons x xs => insert comparator (sort comparator xs) x \where
    \func insert {A : \Type} (comparator : A -> A -> Bool) (list : List A) (c : A) : List A \elim list
      | nil => cons c nil
      | cons x xs => if (comparator x c) (cons x (insert comparator xs c)) (cons c (cons x xs))

-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp



\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
| true => idp
| false => idp

-- 8. Докажите, что fac 3 равно 6.

\func fac-3-is-6 : (fac 3 = 6) => idp

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
  | inl p => f p
  | inr q => g q

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : (P -> Q -> R)) (pq : \Sigma P Q) : R => f (pq.1) (pq.2)

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q R : \Type} (f : (Either P Q) -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) =>
  (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q R : \Type} (f : ((((P -> Q) -> P) -> P) -> Q)) : Q => f (\lam y => y (\lam z => f (\lam t => z)))

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => (\lam p3 => h (3, p3))

-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (impl : \Pi (x : Nat) -> P x -> Q x) (h : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
  (h.1, impl (h.1) h.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : P 3 -> (Q 3 -> Empty) => \lam p3 q3 =>
  \case h 3 \with {
    | inl p => p p3
    | inr q => q q3
  }

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestEq : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5t'''Eq : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp